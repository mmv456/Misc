import tester.*;

class Book {
	String title;
	String author;
	int year;
	double price;
	
	Book(String title, String author, int year, double price) {
		this.title = title;
		this.author = author;
		this.year = year;
		this.price = price;
	}
	
	// compute the sale price of this Book using the given discount rate (as a percentage)
	double salePrice(int discount) {
		return this.price - (this.price * discount) / 100;
	}
	
	// was this book published before the given year?
	boolean publishedBefore(int year) {
		return this.year < year;
	}
}

interface ILoBook {
	// count the books in this list
	int count();
	
	// calculate the total sale price of all books in this list for a given discount
	double salePrice(int discount);

	// produce a list of all books published before the given date from this list of books 
	ILoBook allBefore(int year);
	
	// produce a list of all books in this list, sorted by their price
	ILoBook sortByPrice();
}

class MtLoBook implements ILoBook {
	MtLoBook() {};
	
	// count the books in this list
	// ex. mtlist.count() -> 0
	public int count() {
		return 0;
	}
	
	// calculate the total sale price of all books in this list for a given discount
	// ex. mtlist.salePrice() -> 0
	public double salePrice(int discount) {
		return 0;
	}
	
	// produce a list of all books published before the given date from this list of books
	// ex. mtlist.allBefore(2000) -> mtlist
	public ILoBook allBefore(int year) {
		return this;
	}
	
	// produce a list of all books in this list, sorted by their price
	// ex. mtlist.sortByPrice() -> mtlist
	public ILoBook sortByPrice() {
		return new MtLoBook();
	}
}

class ConsLoBook implements ILoBook {
	Book first;
	ILoBook rest;
	
	ConsLoBook(Book first, ILoBook rest) {
		this.first = first;
		this.rest = rest;
	}
	
	/*
	 * TEMPLATE
	 * 
	 * Fields:
	 * ... this.first ...						-- Book
	 * ... this.rest ...						-- ILoBook
	 * 
	 * Methods:
	 * ... this.count() ...						-- int
	 * ... this.salePrice(int discount) ...		-- double
	 * ... this.allBefore(int year) ...			-- ILoBook
	 * 
	 * Methods for Fields:
	 * ... this.rest.count() ...				-- int
	 * ... this.rest.salePrice(int discount) ...-- double
	 * ... this.rest.allBefore(int year) ...	-- ILoBook
	 */
	
	// count the books in this list
	// ex. lista.count() -> 1
	//	   listc.count() -> 3
	public int count() {
		return 1 + this.rest.count();
	}
	
	// calculate the total sale price of all books in this list for a given discount
	// ex. lista.salePrice() -> 25
	//	   listd.salePrice() -> 95
	public double salePrice(int discount) {
		return this.first.salePrice(discount) + this.rest.salePrice(discount);
	}
	
	// produce a list of all books published before the given date from this list of books
	// ex. lista.allBefore(2000) -> lista
	//	   listb.allBefore(2000) -> mtlist
	//	   listc.allBefore(2000) -> new ConsLoBook(lpp, new ConsLoBook(ll, mtlist));
	public ILoBook allBefore(int year) {
		if (this.first.publishedBefore(year)) {
			return new ConsLoBook(this.first, this.rest.allBefore(year));
		}
		else {
			return this.rest.allBefore(year);
		}
	}
	
	
	public ILoBook sortByPrice() {
		return new MtLoBook();
	}
}

class ExamplesLoBooks {
	ExamplesLoBooks() {}
	
	// Books
	Book htdp = new Book("HTDP", "MF", 2001, 60);
	Book lpp = new Book("LPP", "STX", 1942, 25);
	Book ll = new Book("LL", "FF", 1986, 10);
	
	// test the method salePrice for the class Book
	boolean testSalePrice(Tester t) {
		return t.checkExpect(this.htdp.salePrice(10), 54.0) &&
			   t.checkExpect(this.lpp.salePrice(50), 12.5) &&
			   t.checkExpect(this.ll.salePrice(100), 0.0);
	}
	
	// test the method publishedBefore for the class Book
	boolean testPublishedBefore(Tester t) {
		return t.checkExpect(this.htdp.publishedBefore(2000), false) &&
			   t.checkExpect(this.lpp.publishedBefore(2000), true) &&
			   t.checkExpect(this.ll.publishedBefore(2000), true);
	}
	
	// Lists of Books
	ILoBook mtlist = new MtLoBook();
	ILoBook lista = new ConsLoBook(this.lpp, this.mtlist);
	ILoBook listb = new ConsLoBook(this.htdp, this.mtlist);
	ILoBook listc = new ConsLoBook(this.lpp, 
					new ConsLoBook(this.ll, this.listb));
	ILoBook listd = new ConsLoBook(this.ll, 
					new ConsLoBook(this.lpp, 
					new ConsLoBook(this.htdp, this.mtlist)));
	
	// tests for the method count
	boolean testCount(Tester t) {
		return
				t.checkExpect(this.mtlist.count(), 0) &&
				t.checkExpect(this.lista.count(), 1) &&
				t.checkExpect(this.listd.count(), 3);
	}
	
	// tests for the method salePrice
	boolean testLoBookSalePrice(Tester t) {
		return
				// no discount -- full price
				t.checkInexact(this.mtlist.salePrice(0), 0.0, 0.001) &&
				t.checkInexact(this.lista.salePrice(0), 25.0, 0.001) &&
				t.checkInexact(this.listc.salePrice(0), 95.0, 0.001) &&
				t.checkInexact(this.listd.salePrice(0), 95.0, 0.001) &&
				// 50% off sale -- half price
				t.checkInexact(this.mtlist.salePrice(50), 0.0, 0.001) &&
				t.checkInexact(this.lista.salePrice(50), 5.0, 0.001) &&
				t.checkInexact(this.listc.salePrice(50), 47.5, 0.001) &&
				t.checkInexact(this.listd.salePrice(50), 47.5, 0.001);
	}
	
	// tests for the method allBefore
	boolean testAllBefore(Tester t) {
		return
				t.checkExpect(this.mtlist.allBefore(2001), this.mtlist) &&
				t.checkExpect(this.lista.allBefore(2001), this.lista) &&
				t.checkExpect(this.listb.allBefore(2001), this.mtlist) &&
				t.checkExpect(this.listc.allBefore(2001), 
						new ConsLoBook(this.lpp, 
								new ConsLoBook(this.ll, this.mtlist))) &&
				t.checkExpect(this.listd.allBefore(2001), 
						new ConsLoBook(this.ll, 
								new ConsLoBook(this.lpp, this.mtlist)));
	}
}







