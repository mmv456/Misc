import tester.*;

// to represent a geometric shape
interface IShape {
	// to compute the area of this shape
	double area();
	// to compute the distance from this shape to the origin
	double distanceToOrigin();
}

// to represent a circle
class Circle implements IShape {
	int x; // represents the center of the circle
	int y;
	int radius;
	String color;
	
	Circle(int x, int y, int radius, String color) {
		this.x = x;
		this.y = y;
		this.radius = radius;
		this.color = color;
	}
	
	/*
	 * TEMPLATE
	 * 
	 * Fields:
	 * ... this.x ...			-- int
	 * ... this.y ...			-- int
	 * ... this.radius ...		-- int
	 * ... this.color ...		-- String
	 * 
	 * Methods:
	 * ... this.area() ...		-- double
	 */
	
	// to compute the area of this shape
	public double area() {
		return Math.PI * this.radius * this.radius;
	}
	
	// to compute the distance from this shape to the origin
	public double distanceToOrigin() {
		return Math.sqrt((this.x * this.x) + (this.y * this.y));
	}
}

// to represent a square
class Square implements IShape {
	int x; // represents the top-left corner of the square
	int y;
	int size;
	String color;
	
	Square(int x, int y, int size, String color) {
		this.x = x;
		this.y = y;
		this.size = size;
		this.color = color;
	}
	
	/*
	 * TEMPLATE
	 * 
	 * Fields:
	 * ... this.x ...			-- int
	 * ... this.y ...			-- int
	 * ... this.size ...		-- int
	 * ... this.color ...		-- String
	 * 
	 * Methods:
	 * ... this.area() ...		-- double
	 */
	
	// to compute the area of this shape
	public double area() {
		return this.size * this.size;
	}
	
	// to compute the distance from this shape to the origin
	public double distanceToOrigin() {
		return Math.sqrt((this.x * this.x) + (this.y * this.y));
	}
}

class ExamplesShapes {
	ExamplesShapes() {}
	
	IShape c1 = new Circle(50, 50, 10, "red");
	IShape s1 = new Square(50, 50, 30, "red");
	
	// test the method area in the classes that implement IShape
	boolean testIShapeArea(Tester t) {
		return
				t.checkInexact(this.c1.area(), 314.15, 0.01) &&
				t.checkInexact(this.s1.area(), 900.0, 0.01);
	}
	
	// test the method distanceToOrigin in the classes that implement IShape
	boolean testIShapeDistanceToOrigin(Tester t) {
			return
					t.checkInexact(this.c1.distanceToOrigin(), 70.71, 0.001) &&
					t.checkInexact(this.s1.distanceToOrigin(), 70.71, 0.001);
	}
}