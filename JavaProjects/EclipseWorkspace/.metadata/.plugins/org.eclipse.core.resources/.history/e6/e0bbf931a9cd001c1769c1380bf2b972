import tester.*;

// to represent a book
class Book {
	String title;
	Author author;
	Book(String title, Author author) {
		this.title = title;
		this.author = author;
	}
	
	boolean sameBook(Book that) {
		return this.title.equals(that.title) && this.author.sameAuthor(that.author);
	}
}

// to represent an Author
class Author {
	String first;
	String last;
	Author(String first, String last) {
		this.first = first;
		this.last = last;
	}
	
	boolean sameAuthor(Author that) {
		return this.first.equals(that.first) && this.last.equals(that.last);
	}
}

// to represent a Cartesian point
class CartPt {
	int x;
	int y;
	CartPt(int x, int y) {
		this.x = x;
		this.y = y;
	}
	
	boolean sameCartPt(CartPt that) {
		return this.x == that.x && this.y == that.y;
	}
}

class ExamplesSameness {
	ExamplesSameness() {}
	
	Author a1 = new Author("Stephen", "King");
	Author a2 = new Author("Stephen", "King");
	
	Book b1 = new Book("Cell", this.a1);
	Book b2 = new Book("Cell", this.a2);
	
	CartPt cp1 = new CartPt(1, 2);
	CartPt cp2 = new CartPt(1, 2);
	
	boolean testSame(Tester t) {
		return t.checkExpect(a1.sameAuthor(a2), true) &&
			   t.checkExpect(b1.sameBook(b2), true) &&
			   t.checkExpect(cp1.sameCartPt(cp2), true);
	}
	boolean testDifferent(Tester t) {
		return t.checkExpect(a1.sameAuthor(new Author("P", "K")), false) &&
			   t.checkExpect(b1.sameBook(new Book("abc", this.a2)), false) &&
			   t.checkExpect(new CartPt(3, 4).sameCartPt(new CartPt(6, 7)), false);
	}
	
}