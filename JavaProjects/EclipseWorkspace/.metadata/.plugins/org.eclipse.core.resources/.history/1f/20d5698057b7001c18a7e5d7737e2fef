import tester.*;

interface List {
	
	// does this list contain a number that's even?
	boolean containsEven();
	
	// does this list contain a number that is positive and odd?
	boolean containsPositiveOdd();
	
	// does this list contain a number between 5 and 10, inclusive?
	boolean between5and10();
}

class MTList implements List {
	
	// does this list contain a number that's even?
	public boolean containsEven() {
		return false;
	}
	
	// does this list contain a number that is positive and odd?
	public boolean containsPositiveOdd() {
		return false;
	}
	
	// does this list contain a number between 5 and 10, inclusive?
	public boolean between5and10() {
		return false;
	}
}

class ConsList implements List {
	int first;
	List rest;
	
	// the constructor
	ConsList(int first, List rest) {
		this.first = first;
		this.rest = rest;
	}
	
	// does this list contain a number that's even?
	public boolean containsEven() {
		if ((this.first % 2) == 0) {
			return true;
		}
		else {
			return this.rest.containsEven();
		}
	}
	
	// does this list contain a number that is positive and odd?
	public boolean containsPositiveOdd() {
		if ((this.first % 2 == 1) && (this.first > 0)) {
			return true;
		}
		else {
			return this.rest.containsPositiveOdd();
		}
	}
	
	// does this list contain a number between 5 and 10, inclusive?
	public boolean between5and10() {
		if ((this.first >= 5) && (this.first <= 10)) {
			return true;
		}
		else {
			return this.rest.between5and10();
		}
	}
}

class ExamplesList {
	ExamplesList() {}
	
	// Empty List
	List mt = new MTList();
	
	// Single-Value Lists
	List single_one = new ConsList(1, mt);
	List single_two = new ConsList(2, mt);
	List single_three = new ConsList(3, mt);
	List single_negative_ten = new ConsList(-10, mt);
	
	// Double-Value Lists
	List double_four = new ConsList(4, single_one);
	List double_five = new ConsList(5, single_two);
	List double_one = new ConsList(1, single_three);
	List double_six = new ConsList(6, single_negative_ten);
	
	// Triple-Value Lists
	List triple_two = new ConsList(2, double_four);
	List triple_nine = new ConsList(9, double_five);
	List triple_negativethree = new ConsList(-3, double_one);
	List triple_five = new ConsList(5, double_six);
	
	// test the method containsEven
	boolean testContainsEven(Tester t) {
		return t.checkExpect(mt.containsEven(), false) &&
			   t.checkExpect(single_one.containsEven(), false) &&
			   t.checkExpect(double_four.containsEven(), true) &&
			   t.checkExpect(triple_two.containsEven(), true) &&
			   t.checkExpect(triple_nine.containsEven(), true);
	}
	
	// test the method containsPositiveOdd
	boolean testContainsPositiveOdd(Tester t) {
		return t.checkExpect(mt.containsPositiveOdd(), false) &&
			   t.checkExpect(single_one.containsPositiveOdd(), true) &&
			   t.checkExpect(triple_negativethree.containsPositiveOdd(), true);
	}
	
	// test the method between5and10
	boolean testBetween5and10(Tester t) {
		return t.checkExpect(mt.between5and10(), false) &&
			   t.checkExpect(single_one.between5and10(), false) &&
			   t.checkExpect(double_six.between5and10(), true) &&
			   t.checkExpect(triple_nine.between5and10(), true);
	}
}