#from crypt import methods
from http import client
import json
from multiprocessing.connection import Client
from flask import Flask, jsonify, request
from flask_restful import Resource, Api, reqparse
from google.cloud import bigquery
import os
import pandas as pd
import pyarrow

app = Flask(__name__)
api = Api(app)

output = {}


credentials_path = 'D:/Resume/DynoCodingINterview/dyno-sequence-api-cred_main.json'
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = credentials_path

bqclient = bigquery.Client()

@app.route('/')
def index():
    return 'Welcome to the home page.\n /data .\n /data/exact=SEQUENCE_HERE \n /data/hamming=SEQUENCE_HERE'

# allow both GET and POST requests
@app.route('/form-exact-match', methods=['GET', 'POST'])
def exact_example():
    # handle the POST request
    if request.method == 'POST':
        sequence_json = request.form.get('sequence_json')
        return '''
                  <h1>The sequence is: {}</h1>
                  <h1>The info is: {}</h1>'''.format(get_sequence(sequence_json), get_exact_data(get_sequence(sequence_json)))
    else:
        # otherwise handle the GET request
        return '''
           <form method="POST">
               <div><label>Sequence JSON: <input type="text" name="sequence_json"></label></div>
               <input type="submit" value="Submit">
           </form>'''

# Dict -> String
def get_sequence(sequence_json):
    sequence = json.loads(sequence_json)["sequence"]
    return sequence

# String -> String
def get_exact_data(sequence):
    job = """SELECT id, gene, locus_tag, db_xref, protein, protein_id, location, gbkey, file_hash
      FROM `dyno-sequence-api.sequence_data.Sequences_Data`
      WHERE sequence='{}'"""
    query_job = bqclient.query(job.format(sequence))  # Make an API request.
    df = query_job.to_dataframe()

    if df.empty:
         return str(jsonify({'Info': 'Search returned no exact matches'}))
    else:
        json_object = df.to_json()
        return str(json_object)
    

# Gets all data
@app.route('/data', methods=['GET'])
def get_all_data():

    job = """SELECT * FROM `dyno-sequence-api.sequence_data.Sequences_Data`"""
    query_job = bqclient.query(job)  # Make an API request.
    list = []
    for row in query_job:
        # Row values can be accessed by field name or index.
        list.append("id={}, gene={}, locus_tag={}, db_xref={}, protein={}, protein_id={}, location={}, gbkey={}, sequence={}, file_hash={}"
        .format(row[0], row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9]))

    if len(list) > 0:
        return json.dumps(list)
    else:
        return jsonify({'Error': 'No Data Found'})
    

# Exact Match: returns all information about sequences in the db that exactly match the input sequence
# @app.route('/data/exact=<string:sequence_as_key>', methods=['GET'])
# def get_exact_data(sequence_as_key):

#     job = """SELECT id, gene, locus_tag, db_xref, protein, protein_id, location, gbkey, file_hash
#      FROM `dyno-sequence-api.sequence_data.Sequences_Data`
#      WHERE sequence={}"""
#     query_job = bqclient.query(job.format(sequence_as_key))  # Make an API request.
#     list = []
#     for row in query_job:
#         # Row values can be accessed by field name or index.
#         list.append("id={}, gene={}, locus_tag={}, db_xref={}, protein={}, protein_id={}, location={}, gbkey={}, file_hash={}"
#         .format(row[0], row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8]))

#     if len(list) > 0:
#         return jsonify(list)
#     else:
#         return jsonify({'Info': 'Search returned no exact matches'})

# # Return the Hamming distance between string1 and string2.
# # string1 and string2 should be the same length.
# def hamming_distance(string1, string2): 
#     if len(string1) != len(string2):
#         return 100
#     else:
#         # Start with a distance of zero, and count up
#         distance = 0
#         # Loop over the indices of the string
#         L = len(string1)
#         for i in range(L):
#             # Add 1 to the distance if these two characters are not equal
#             if string1[i] != string2[i]:
#                 distance += 1
#         # Return the final count of differences
#         return distance

# # Hamming Match: returns all information about sequences in the db within 1 hamming distance from the input sequence
# # assumptions: we are not adding the given sequence_as_key to the list for searching
# @app.route('/data/hamming=<string:sequence_as_key>', methods=['GET'])
# def get_hamming_data(sequence_as_key):

#     # Get a list1 of all sequences
#     job1 = """SELECT sequence
#      FROM `dyno-sequence-api.sequence_data.Sequences_Data`"""
#     query_job1 = bqclient.query(job1)  # Make an API request.
#     sequences_in_db = []
#     for row in query_job1:
#         sequences_in_db.append(row[0])

#     # are any of them within 1 hamming distance of given var?
#     # if they pass, add to the passed list
#     sequences_passed_hamming = []

#     for item in sequences_in_db:
#         if hamming_distance(sequence_as_key, item) <= 1:
#             sequences_passed_hamming.append(item)

    
#     if len(sequences_passed_hamming) == 0:
#         return jsonify({'Info': 'Search returned no hamming matches'})
#     else:
#         # of these qualified sequences, get their info and add to list2
#         passed_sequences_info = []

#         for sequence in sequences_passed_hamming:
#             passed_sequences_info.append(get_exact_data(sequence)) # this is the line that's throwing the error

#         # output data from list
#         if len(passed_sequences_info) > 0:
#             return passed_sequences_info
#         else:
#             return jsonify({'Info': 'Search returned no data for the sequences that were hamming matched'})
    
#if __name__ == "__main__":
#    app.run(debug=True, host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))






# Used for testing purposes
#print(get_hamming_data("TTGAATAATGTCCAAGAGGAAGCTGGAAGAGATGTCACCAGAACACGAAACGGAGGAAGAGGAGGACTCGGAACCAGAAAGAGAAGAAGATCGGACTCTGGAGAAAGACGGAATGACAGCGGGACCGAAGATATCGTTCACAGCGATGTTGCGGAGAATACTACAGGCGAACTTACCGTTGAGCCAAGTACATCCGGGCTATCTACTGGGATTCGTGACGATGATGACGGGAGAGACCAATCTACCAGTAGAACTAGAGAACTCCCTGTATGGTTTTCAAAAAGCGGGCCAGATATGGAACAACGGTATTGGAAAGGCTTCAAAGAAAGGTGTGATAGAATACTTACAGAGCTGCAAAACTCTGATGGGCAGTTGGTTCGCGACATCTTTCGATTCGAAGACCCTAGAGAGTATGATGACTTTATTAGATGCATACAACGAGACACAAATTACAGAAGAGGACTGCTCCAGGTATGTCGCGAAGATAGTCACATCCACGTCGTGCACGACTGCACCTTCAGCAACGGAATGTGCCGGTGCGACTGGTACAAAAAGGCGAAAACCTACGGGGCACACCTTAGACGAGATAAACGTTCTCATCGACGAAATTCCTGTAGAAGTAGAACCGCAACCGACATTCAAAACCTACTCTTCTATTATTGCACGAAAGGACGACAAATTGTATATCAAAAAATTCGAGGACAGCTGGAAAGAATACCAAGTGAAGGTTACAATCTATCGACGTCAAGACTTAATGGACTGTCCGAATACTTCAGAGAAATGGCACTACAAATACCAGGAGATGGACCTGAATTACAACAGTGGGAGCCAGATTTGGAAGTTGATGAGCCAGCTGAAGTACCAACAAATGGAGTACCTCAACGAAAAAAACGTAAAATGGGTGCCCAAGAAAGAATACAGCTAAAGACAGTTGAGTTGCTGGAATTGTATCCCATATGTCCTCCAGAAGCTATAGTAAAACATAGGATTTGGAGATGTGATCCAGAGCTGAGATTTAAGAATGTAAATGATAAAGAAATTAGAAATGCTATTTCTAGTTTCAAGGATACACTGACCACTTATTCAATGAATGAATATCAGAAAATGTACAATAATCCTGATTGTATACCTATATTTAGTGCTGGTTATGGGAATTATGAGACTTATTATTATAATGTTGAAAATAGCCTCAAAATTATGGATGAACTGGTTAATTACCAGTGTGGTGGAGATGAAGAGGCTATCATTGATTTTGTGACTACTTTATATAATGTGTTGGAACGTAAAGTTCCTAAATTGAACTGCATTGTAATTCACTCACCTCCCAGTGCGGGGAAGAATTTCTTTTTTGATGCAGTAAAGGACTATTATTTGAATTGTGGCCATCTATGTAATGCAAATAAATATAATAATTTTCCATTTCAAGATGCAGAAGGCAGAAGAATTGTACTGTGGAATGAACCAAACTATGCTCCAGAATTTCTGGAACAGATCAAAGAAATACTAGGTGGAGACTCCACTAGTGTAAATGTAAAGTATCAAAGTGATACTCCTGTGTATCGTACACCTGTGATTGTACTGACAAATAATAAGGTTTCATTCATGAATCATTCTGCCTTCATTGATAGGATTAGGGTGTTTAACTGGATGGCTGCACCATTTTTAGCACAGTATAAGAAGAAGCCAAATCCATTGGCAGTATATGACTTCTTTAAGAAGTATAAATTGGTGGAAGGGTAA"))
#print(hamming_distance("ATGAATAATGTCCAAGAGGAAGCTGGAAGAGATGTCACCAGAACACGAAACGGAGGAAGAGGAGGACTCGGAACCAGAAAGAGAAGAAGATCGGACTCTGGAGAAAGACGGAATGACAGCGGGACCGAAGATATCGTTCACAGCGATGTTGCGGAGAATACTACAGGCGAACTTACCGTTGAGCCAAGTACATCCGGGCTATCTACTGGGATTCGTGACGATGATGACGGGAGAGACCAATCTACCAGTAGAACTAGAGAACTCCCTGTATGGTTTTCAAAAAGCGGGCCAGATATGGAACAACGGTATTGGAAAGGCTTCAAAGAAAGGTGTGATAGAATACTTACAGAGCTGCAAAACTCTGATGGGCAGTTGGTTCGCGACATCTTTCGATTCGAAGACCCTAGAGAGTATGATGACTTTATTAGATGCATACAACGAGACACAAATTACAGAAGAGGACTGCTCCAGGTATGTCGCGAAGATAGTCACATCCACGTCGTGCACGACTGCACCTTCAGCAACGGAATGTGCCGGTGCGACTGGTACAAAAAGGCGAAAACCTACGGGGCACACCTTAGACGAGATAAACGTTCTCATCGACGAAATTCCTGTAGAAGTAGAACCGCAACCGACATTCAAAACCTACTCTTCTATTATTGCACGAAAGGACGACAAATTGTATATCAAAAAATTCGAGGACAGCTGGAAAGAATACCAAGTGAAGGTTACAATCTATCGACGTCAAGACTTAATGGACTGTCCGAATACTTCAGAGAAATGGCACTACAAATACCAGGAGATGGACCTGAATTACAACAGTGGGAGCCAGATTTGGAAGTTGATGAGCCAGCTGAAGTACCAACAAATGGAGTACCTCAACGAAAAAAACGTAAAATGGGTGCCCAAGAAAGAATACAGCTAAAGACAGTTGAGTTGCTGGAATTGTATCCCATATGTCCTCCAGAAGCTATAGTAAAACATAGGATTTGGAGATGTGATCCAGAGCTGAGATTTAAGAATGTAAATGATAAAGAAATTAGAAATGCTATTTCTAGTTTCAAGGATACACTGACCACTTATTCAATGAATGAATATCAGAAAATGTACAATAATCCTGATTGTATACCTATATTTAGTGCTGGTTATGGGAATTATGAGACTTATTATTATAATGTTGAAAATAGCCTCAAAATTATGGATGAACTGGTTAATTACCAGTGTGGTGGAGATGAAGAGGCTATCATTGATTTTGTGACTACTTTATATAATGTGTTGGAACGTAAAGTTCCTAAATTGAACTGCATTGTAATTCACTCACCTCCCAGTGCGGGGAAGAATTTCTTTTTTGATGCAGTAAAGGACTATTATTTGAATTGTGGCCATCTATGTAATGCAAATAAATATAATAATTTTCCATTTCAAGATGCAGAAGGCAGAAGAATTGTACTGTGGAATGAACCAAACTATGCTCCAGAATTTCTGGAACAGATCAAAGAAATACTAGGTGGAGACTCCACTAGTGTAAATGTAAAGTATCAAAGTGATACTCCTGTGTATCGTACACCTGTGATTGTACTGACAAATAATAAGGTTTCATTCATGAATCATTCTGCCTTCATTGATAGGATTAGGGTGTTTAACTGGATGGCTGCACCATTTTTAGCACAGTATAAGAAGAAGCCAAATCCATTGGCAGTATATGACTTCTTTAAGAAGTATAAATTGGTGGAAGGGTAA",
#"ATGAATAATGTCCAAGAGGAAGCTGGAAGAGATGTCACCAGAACACGAAACGGAGGAAGAGGAGGACTCGGAACCAGAAAGAGAAGAAGATCGGACTCTGGAGAAAGACGGAATGACAGCGGGACCGAAGATATCGTTCACAGCGATGTTGCGGAGAATACTACAGGCGAACTTACCGTTGAGCCAAGTACATCCGGGCTATCTACTGGGATTCGTGACGATGATGACGGGAGAGACCAATCTACCAGTAGAACTAGAGAACTCCCTGTATGGTTTTCAAAAAGCGGGCCAGATATGGAACAACGGTATTGGAAAGGCTTCAAAGAAAGGTGTGATAGAATACTTACAGAGCTGCAAAACTCTGATGGGCAGTTGGTTCGCGACATCTTTCGATTCGAAGACCCTAGAGAGTATGATGACTTTATTAGATGCATACAACGAGACACAAATTACAGAAGAGGACTGCTCCAGGTATGTCGCGAAGATAGTCACATCCACGTCGTGCACGACTGCACCTTCAGCAACGGAATGTGCCGGTGCGACTGGTACAAAAAGGCGAAAACCTACGGGGCACACCTTAGACGAGATAAACGTTCTCATCGACGAAATTCCTGTAGAAGTAGAACCGCAACCGACATTCAAAACCTACTCTTCTATTATTGCACGAAAGGACGACAAATTGTATATCAAAAAATTCGAGGACAGCTGGAAAGAATACCAAGTGAAGGTTACAATCTATCGACGTCAAGACTTAATGGACTGTCCGAATACTTCAGAGAAATGGCACTACAAATACCAGGAGATGGACCTGAATTACAACAGTGGGAGCCAGATTTGGAAGTTGATGAGCCAGCTGAAGTACCAACAAATGGAGTACCTCAACGAAAAAAACGTAAAATGGGTGCCCAAGAAAGAATACAGCTAAAGACAGTTGAGTTGCTGGAATTGTATCCCATATGTCCTCCAGAAGCTATAGTAAAACATAGGATTTGGAGATGTGATCCAGAGCTGAGATTTAAGAATGTAAATGATAAAGAAATTAGAAATGCTATTTCTAGTTTCAAGGATACACTGACCACTTATTCAATGAATGAATATCAGAAAATGTACAATAATCCTGATTGTATACCTATATTTAGTGCTGGTTATGGGAATTATGAGACTTATTATTATAATGTTGAAAATAGCCTCAAAATTATGGATGAACTGGTTAATTACCAGTGTGGTGGAGATGAAGAGGCTATCATTGATTTTGTGACTACTTTATATAATGTGTTGGAACGTAAAGTTCCTAAATTGAACTGCATTGTAATTCACTCACCTCCCAGTGCGGGGAAGAATTTCTTTTTTGATGCAGTAAAGGACTATTATTTGAATTGTGGCCATCTATGTAATGCAAATAAATATAATAATTTTCCATTTCAAGATGCAGAAGGCAGAAGAATTGTACTGTGGAATGAACCAAACTATGCTCCAGAATTTCTGGAACAGATCAAAGAAATACTAGGTGGAGACTCCACTAGTGTAAATGTAAAGTATCAAAGTGATACTCCTGTGTATCGTACACCTGTGATTGTACTGACAAATAATAAGGTTTCATTCATGAATCATTCTGCCTTCATTGATAGGATTAGGGTGTTTAACTGGATGGCTGCACCATTTTTAGCACAGTATAAGAAGAAGCCAAATCCATTGGCAGTATATGACTTCTTTAAGAAGTATAAATTGGTGGAAGGGTAA"))

#print(type(get_exact_data({"sequence": "b"})))
#print(json.loads('{"sequence": "b"}'))
#print(json.loads('{"sequence": "b"}')["sequence"])

#x = {"sequence": "b"}
#y = json.dumps(x)
#print(json.loads(y)["sequence"])

#print(get_exact_data("ATGGCTTGCGTATACGGTATTGAGAACTGTGATCATACAAAGTGTTTTCGCTGTGGAGAGTGCACTAGAGGCAGTCAAGTACATAGACTTTGTTATTCCAACATTACAGAGGAAGACTATGCGATATCACAGTTGCTTGCCAGTAGTACAGAGTGTCTACCTACAGAAAGCGACGAAGAAACAGCAGACCAGATACGCTCAGATACGCCAATCAGTATGCAGGTACAAGAGTATCTCGATTGGGAGAATACTGCTCTATTTTCGACAACATACCGCTTTCATACATACTGGACACACTTTTATGGCGATCGTGAGGAGATTGATTCAGATTATAGTACTCCTGAGGCTAGTGATGAGGATAGTCAATCACTGCTAAGGAACAAGATTAAAGTACATAGGTATCTTACAAGTGAAATGACTGCACGAGAATTTTTTCTTGCAAATAGAGACTTTGATATTGATGTTTTGTGTTTGCCAGATGATTCTCTTATTAGAATGCGACTTGGTACAGTGACAAAATTTGATCCTATTGCTAAACAACATTTTGTGTATCATAAAGAGTGTATTGATCCTGAACAATTTCATTTGACAGAAAAAGGATTCAGTAAAGCTGTTCTTTCAGTAAAAGCAACAAATAAGAATGCATTTATCTCATTAATTGAAGATCTGTTGTTTACATTTTTTTGTCAGGAGTGTAAGAAATTTATTTTTCATACAGTGGAGTATATGGAAGATAGTGTATGGAAATTACCAAATGAAAACATCTGGCCAGACTGCAAACATCTTTTATATAATTGTCACTTACTTTATGATTTAAATACTTATGTGAATTTGAAAGGACATAAATTAATTGCTACTGTTTCACCGCAGGAACCACCAACGAAACGGCAACGCCTAGAATTCCATGAATAA"))
#print(get_exact_data("ACGT"))